local lang_map = {
	python = "python",
	lua = "lua",
	cpp = "cpp",
	c = "c",
	rust = "rust",
	go = "go",
	javascript = "javascript",
	js = "javascript",
	typescript = "typescript",
	ts = "typescript",
	sh = "sh",
	bash = "sh",
	powershell = "ps1",
	csharp = "cs",
	java = "java",
	html = "html",
	css = "css",
	sql = "sql",
}

local function detect_filetype(query)
	if not query then
		return nil
	end
	local lang = query:match("^(%S+)")
	if lang and lang_map[lang] then
		return lang_map[lang]
	end
	return nil
end

local function create_floating_window(content, ft, opts)
	opts = opts or {}
	local width = opts.width or math.floor(vim.o.columns * 0.8)
	local height = opts.height or math.floor(vim.o.lines * 0.7)

	local col = math.floor((vim.o.columns - width) / 2)
	local row = math.floor((vim.o.lines - height) / 2)

	local buf = vim.api.nvim_create_buf(false, true)
	vim.bo[buf].bufhidden = "wipe"

	vim.api.nvim_buf_set_lines(buf, 0, -1, false, content or {})

	local win_config = {
		relative = "editor",
		width = width,
		height = height,
		col = col,
		row = row,
		style = "minimal",
		border = "rounded",
	}
	vim.api.nvim_open_win(buf, true, win_config)

	if ft then
		vim.bo[buf].filetype = ft
	end

	vim.bo[buf].modifiable = false

	-- allow closing with 'q'
	vim.keymap.set("n", "q", function()
		if vim.api.nvim_buf_is_valid(buf) then
			vim.api.nvim_buf_delete(buf, { force = true })
		end
	end, { buffer = buf, nowait = true })
end

local function run_cheat(query)
	if not query or query == "" then
		return
	end

	-- Detect if it's a learn query
	local learn_mode = query:match("^:learn:?")

	local cheat_query
	if learn_mode then
		-- e.g. ":learn cpp"
		local parts = vim.split(query, "%s+", { trimempty = true })
		if #parts == 1 then
			cheat_query = ":learn"
		else
			cheat_query = ":learn:" .. parts[2]
		end
	else
		-- Normal mode: split lang + topic
		local parts = vim.split(query, "%s+", { trimempty = true })
		local lang, rest = parts[1], table.concat(vim.list_slice(parts, 2), " ")
		if rest ~= "" then
			cheat_query = lang .. "/" .. rest:gsub("%s+", "+")
		else
			cheat_query = lang
		end
	end

	local ft = detect_filetype(query)

	vim.fn.jobstart({ "curl", "-s", "cheat.sh/" .. cheat_query .. "?T" }, {
		stdout_buffered = true,
		on_stdout = function(_, data)
			if data and not (#data == 1 and data[1] == "") then
				create_floating_window(data, ft)
			end
		end,
	})
end

local function cheat_prompt()
	vim.ui.input({ prompt = "cheat.sh: " }, function(input)
		if input then
			run_cheat(input)
		end
	end)
end

vim.api.nvim_create_user_command("Cheat", function(opts)
	if opts.args ~= "" then
		run_cheat(opts.args)
	else
		cheat_prompt()
	end
end, { nargs = "*" })

vim.keymap.set("n", "<leader>e", cheat_prompt, { desc = "Search cheat.sh" })
